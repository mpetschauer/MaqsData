

@using MaqsData.DataTransferObjects
@using MaqsData.Modules
@using MaqsData.Contexts;
@using MaqsData.Data;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.EntityFrameworkCore.Metadata;

@inject NavigationManager nav
@inject ISnackbar Snackbar
@inject IDbContextFactory<DocumentContext> contextFactory;


<PageTitle>Form</PageTitle>

<div class="container">


    <div class="row">
        <label>Necklaces Added</label>
        <input class="fieldz" @bind="Dataset.NecklacesSold" @oninput="ChangeHandler" />
        <label>Bracelets Added</label>
        <input class="fieldz" @bind="Dataset.BraceletsSold" @oninput="ChangeHandler" />
    </div>
    <div class="row">
        <label>Rings Added</label>
        <input class="fieldz" @bind="Dataset.RingsSold" @oninput="ChangeHandler" />
        <label>Earrings Added</label>
        <input class="fieldz" @bind="Dataset.EarringsSold" @oninput="ChangeHandler" />
    </div>
    <div class="row">
        <label>Key Chains Added</label>
        <input class="fieldz" @bind="Dataset.KeyChainsSold" @oninput="ChangeHandler" />
        <label>Hair Clips Added</label>
        <input class="fieldz" @bind="Dataset.HairClipsSold" @oninput="ChangeHandler" />
    </div>


    <div class="buttons">

        <button class="buttonz" @onclick="FunctionsHandler">Submit</button>
        <div class="divider" />
        <button class="buttonz" @onclick="FunctionsHandler">Clear</button>
        @{
            if (!isValid)
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
                Snackbar.Add($"You have {errors.Count} errors on the form: {ErrorString} fields must be filled in", Severity.Error);
                isValid = true;
                ErrorString = "";
                errors = new();
            }
            else if (Submitted == true)
            {
                Snackbar.Add($"Form Submitted", Severity.Success);
                Submitted = false;
            }
        }

    </div>


</div>



@code {

    [Parameter]
    public DocumentModel Dataset
    {
        get
        {
            return _dataset;
        }
        set
        {

        }
    }


    bool isValid = true;
    List<string> errors = new();
    string ErrorString;
    public bool Submitted = false;
    public DocumentModel _dataset = new();



    public void ChangeHandler(ChangeEventArgs e)
    {

    }

    public void FunctionsHandler()
    {
        errors = Validate(Dataset, errors);

        if (errors.Count != 0)
        {
            isValid = false;
        }
        else
        {
            Submitted = true;
            Functions fn = new(contextFactory);
            fn.AdjustInventory(Dataset);
            nav.NavigateTo("/");
        }



    }

    protected override async Task OnParametersSetAsync()
    {
        return;
    }


    protected override async Task OnInitializedAsync()
    {
        CreateData cd = new();



        return;
    }


    public List<string> Validate(DocumentModel doc, List<string> errors)
    {

        if (doc.NecklacesSold== null)
            errors.Add("Necklace Count");
        if (doc.RingsSold == null)
            errors.Add("Rings Sold");
        if (doc.EarringsSold == null)
            errors.Add("Earrings Sold");
        if (doc.BraceletsSold == null)
            errors.Add("Bracelet Count");
        if (doc.HairClipsSold == null)
            errors.Add("Hair Clip Count");
        if (doc.KeyChainsSold == null)
            errors.Add("Key Chain Count");


        ErrorString = GetAlertString(errors);
        return errors;

    }


    public string GetAlertString(List<string> errors)
    {
        string errorString = "";
        foreach (string error in errors)
        {
            if (errors.Count == 1)
                errorString += error + " ";
            else
                errorString += error + ", ";

        }

        return errorString;
    }
}

